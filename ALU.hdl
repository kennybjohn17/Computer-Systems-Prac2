CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // Manipulate x and y inputs based on control bits
        Mux16(a=x, b=false, sel=zx, out=xz);
        Not16(in=xz, out=nx1);
        Mux16(a=y, b=false, sel=zy, out=yz);
        Not16(in=yz, out=ny1);

        // Compute the addition and bitwise AND
        Add16(a=nx1, b=ny1, out=addOut);
        And16(a=xz, b=yz, out=andOut);
        Mux16(a=andOut, b=addOut, sel=f, out=fOut);

        // Calculate out based on the NOT control bit
        Not16(in=fOut, out=notOut);

        // Set out based on the NOT output control bit
        Mux16(a=fOut, b=notOut, sel=no, out=out);

        // Calculate zero flag (zr)
        Or16Way(in=out, out=zr);

        // Calculate negative flag (ng)
        Not(in=out[15], out=ng);
}
