CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Zero x input if zx == 1
    Mux16(a=x, b=false, sel=zx, out=xz);

    // Negate x input if nx == 1
    Not16(in=xz, out=nxOut);

    // Zero y input if zy == 1
    Mux16(a=y, b=false, sel=zy, out=yz);

    // Negate y input if ny == 1
    Not16(in=yz, out=nyOut);

    // Perform addition or bitwise AND based on f
    Mux16(a=nxOut, b=xz, sel=f, out=selX);
    Mux16(a=nyOut, b=yz, sel=f, out=selY);
    Add16(a=selX, b=selY, out=addOut);

    // Perform bitwise AND operation
    And16(a=selX, b=selY, out=andOut);

    // Select either addOut or andOut based on f
    Mux16(a=andOut, b=addOut, sel=f, out=out);

    // Negate output if no == 1
    Not16(in=out, out=noOut);

    // Calculate zero and negative flags using Or8Ways
    Or8Way(in=noOut[0..7], out=ng);
    Or8Way(in=noOut[8..15], out=ng8);
    Or8Way(in=out[0..7], out=zr);
    Or8Way(in=out[8..15], out=zr8);

    // Set overall zero and negative flags
    Or(a=ng, b=ng8, out=ng);
    Or(a=zr, b=zr8, out=zr);
}
